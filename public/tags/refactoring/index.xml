<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>refactoring on Konigi</title><link>http://konigi.com/tags/refactoring/</link><description>Recent content in refactoring on Konigi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 13 Jan 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://konigi.com/tags/refactoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Refactoring for designers</title><link>http://konigi.com/blog/refactoring-designers/</link><pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate><guid>http://konigi.com/blog/refactoring-designers/</guid><description>Ryan Singer at 37signals explains code refactoring to designers so that they can use it correctly in a design context.
Designers sometimes use the word “refactor” in a loose way. I think they overhear the word from programmers without getting the precise meaning. This article will introduce the term to designers so they can gain the same advantages that programmers have from a clear understanding.
How do designers loosely understand refactoring?</description></item></channel></rss>