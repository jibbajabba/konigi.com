<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Konigi</title><link>http://konigi.com/tags/programming/</link><description>Recent content in programming on Konigi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Oct 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://konigi.com/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Code.org Program for K-5</title><link>http://konigi.com/blog/codeorg-program-k-5/</link><pubDate>Thu, 09 Oct 2014 00:00:00 +0000</pubDate><guid>http://konigi.com/blog/codeorg-program-k-5/</guid><description>Code.org now has an elementary school program (Kindergarden - 5th grade), and Code Studio for the program looks like its modeled after the free MIT Scratch app, a visual tool that we used with our first son to introduce computer science fundamentals a few years ago. Good stuff.</description></item><item><title>Learn to Code</title><link>http://konigi.com/design/learn-code/</link><pubDate>Tue, 30 Oct 2012 00:00:00 +0000</pubDate><guid>http://konigi.com/design/learn-code/</guid><description>The Debate The debate about whether or not designers need to learn to code is essentially about knowing enough HTML and CSS, and maybe some Javascript to be able to prototype web views.
Mastery and the ability to produce production code is not something most interaction designers and information architects will have the opportunity to achieve, but being capable enough to communicate design on web products requires some basic skills that you can learn in a few days or months to start.</description></item><item><title>Refactoring for designers</title><link>http://konigi.com/blog/refactoring-designers/</link><pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate><guid>http://konigi.com/blog/refactoring-designers/</guid><description>Ryan Singer at 37signals explains code refactoring to designers so that they can use it correctly in a design context.
Designers sometimes use the word “refactor” in a loose way. I think they overhear the word from programmers without getting the precise meaning. This article will introduce the term to designers so they can gain the same advantages that programmers have from a clear understanding.
How do designers loosely understand refactoring?</description></item><item><title>Creative Mornings: Physical Computing</title><link>http://konigi.com/blog/creative-mornings-physical-computing/</link><pubDate>Fri, 12 Dec 2008 00:00:00 +0000</pubDate><guid>http://konigi.com/blog/creative-mornings-physical-computing/</guid><description>At today's excellent Creative Mornings on physical computing, Zach Klein and Casey Pugh from Vimeo talked about tinkering with Arduino, an open-source electronics prototyping platform. They showed some simple circuit controls using the LEDs and Processing, and then demoed a Daft Punk helmet they created with LEDs, that could then be controlled/drawn on via a Flash UI. Neat stuff. Later, I got to talk to Carl, a freelance developer/interaction designer who turned me onto NYC Resistor.</description></item><item><title>Napkin Look &amp; Feel</title><link>http://konigi.com/blog/napkin-look-feel/</link><pubDate>Mon, 17 Nov 2008 00:00:00 +0000</pubDate><guid>http://konigi.com/blog/napkin-look-feel/</guid><description>Napkin Look and Feel is a cool looking open source tool for Java developers to produce application prototypes with a low-fidelity sketchy interface.
The idea is to try to develop a look and feel that can be used in Java applications that looks informal and provisional, yet be fully functional for development. Often when people see a GUI mock-up, or a complete GUI without full functionality, they assume that the code behind it is working.</description></item></channel></rss>